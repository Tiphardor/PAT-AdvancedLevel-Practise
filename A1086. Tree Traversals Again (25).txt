#include <cstdio>
#include <cstring>
#include <stack>
#include <algorithm>

using namespace std;

const int maxn = 40;

struct node
{
	int data;
	node * lchild;
	node * rchild;
};

int pre[maxn],in[maxn],n;

stack<int> s;

node * create(int preL,int preR,int inL,int inR)
{
	if(preL > preR)
		return NULL;
	node * root = (node *)malloc(sizeof(node));
	root->data = pre[preL];
	int k;
	for(k=inL;k<=inR;k++)
	{
		if(in[k] == pre[preL])
			break;
	}
	int numLeft = k - inL;
	root->lchild = create(preL + 1,preL + numLeft,inL,k-1);
	root->rchild = create(preL + numLeft + 1,preR,k+1,inR);
	return root;
}

int num = 0;
void postOrder(node * root)
{
	if(root == NULL)
	{
		return;
	}
	postOrder(root->lchild);
	postOrder(root->rchild);
	num++;
	if(num == 1){
		printf("%d",root->data);
	}else
	{
		printf(" %d",root->data);
	}
}

int main()
{
	int curr1=0,curr2=0;
	scanf("%d",&n);
	for(int i=0;i<2*n;i++)
	{
		char str[5];
		scanf("%s",str);
		if(strcmp(str,"Push") == 0)
		{
			int count;
			scanf("%d",&count);
			s.push(count);
			pre[curr1++] = count;
		}else
		{
			in[curr2++] = s.top();
			s.pop();
		}
	}
	node * root = create(0,n-1,0,n-1);
	postOrder(root);
	return 0;
}
