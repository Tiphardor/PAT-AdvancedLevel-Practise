#include <cstdio>
#include <cmath>
#include <vector>

using namespace std;

const int maxn = 100010;

struct Node
{
	int data;
	int depth;
	vector<int> child;
}node[maxn];

int n,maxDepth = -1,num = 1;
double p,r,ans = 0;

void DFS(int index)
{
	if(node[index].child.size() == 0)
	{
		if(node[index].depth > maxDepth)
		{
			maxDepth = node[index].depth;
			num = 1;
		}
		else if(node[index].depth == maxDepth)
		{
			num++;
		}
		return;
	}
	for(int i = 0;i<node[index].child.size();i++)
	{
		int child = node[index].child[i];
		node[child].depth = node[index].depth + 1;
		DFS(child);
	}
}

int main()
{
  int n,root;
  scanf("%d %lf %lf",&n,&p,&r);
  r  = r / 100;
  for(int i = 0;i<n;i++)
  {
    int k;
    scanf("%d",&k);
    if(k != -1)
	{
		node[k].child.push_back(i);
	}
	else
	{
		root = i;
	}
  }
  node[root].depth = 0;
  DFS(root);
  ans = p * pow(1 + r,maxDepth);
  printf("%.2f %d",ans,num);
  return 0;

}