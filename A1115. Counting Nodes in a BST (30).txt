#include <cstdio>
#include <malloc.h>
#include <queue>

using namespace std;

const int maxn = 1100;

struct Node
{
	int data;
	int step;
	struct Node * lchild;
	struct Node * rchild;
};

int N,a[maxn],maxLevel = -1,num[maxn]={0};

void createBST(int data,Node * node,Node * child,int flag)
{
	if(child == NULL)
	{
		Node * newNode = (Node *)malloc(sizeof(Node));
		newNode->data = data;
		newNode->step = node->step + 1;
		if(newNode->step > maxLevel)
		{
			maxLevel = newNode->step;
		}
		newNode->lchild = NULL;
		newNode->rchild = NULL;
		if(flag == 1)
			node->lchild = newNode;
		else if(flag == 2)
			node->rchild = newNode;
		return;
	}
	
	if(data <= child->data)
	{
		Node * next = child->lchild;
		createBST(data,child,next,1);
	}
	else
	{
		Node * next = child->rchild;
		createBST(data,child,next,2);
	}
}

void levelOrder(Node * root)
{
	queue<Node *> q;
	q.push(root);
	while(!q.empty())
	{
		Node * node = q.front();
		q.pop();
		num[node->step]++;
		if(node->lchild != NULL)
		{
			q.push(node->lchild);
		}
		if(node->rchild != NULL)
		{
			q.push(node->rchild);
		}
	}
}

int main()
{
	Node * root;
	scanf("%d",&N);
	for(int i=0;i<N;i++)
	{
		scanf("%d",&a[i]);
	}
	for(int i=0;i<N;i++)
	{
		if(i == 0)
		{
			root = (Node *)malloc(sizeof(Node));
			root->data = a[i];
			root->step = 1;
			root->lchild = NULL;
			root->rchild = NULL;
		}
		else
		{
			if(a[i] <= root->data)
			{
				createBST(a[i],root,root->lchild,1);
			}
			else
			{
				createBST(a[i],root,root->rchild,2);
			}
		}
	}
	levelOrder(root);
	if(N != 1)
	{
		printf("%d + %d = %d",num[maxLevel],num[maxLevel - 1],num[maxLevel] + num[maxLevel - 1]);
	}
	else
	{
		printf("1 + 0 = 1");
	}
	return 0;
}