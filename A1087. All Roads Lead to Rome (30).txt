#include <stdio.h>
#include <iostream>
#include <algorithm>
#include <string>
#include <map>
using namespace std;

const int maxn = 210;
const int INF = 1000000000;

int G[maxn][maxn];
int d[maxn];
int pre[maxn];
int weight[maxn];
int num[maxn];
int w[maxn];
bool vis[maxn] = {false};
int pt[maxn];
int n,k;
string fcity;
map<string,int> strToInt;
map<int,string> intToStr;
int numCity = 0;

void Dijkstra(int s)
{
  fill(d,d+maxn,INF);
  fill(w,w+maxn,0);
  fill(num,num+maxn,0);
  fill(pt,pt+maxn,0);
  for(int i = 0;i<n;i++)
    pre[i] = i;
  d[s] = 0;
  w[s] = weight[s];
  num[s] = 1;
  for(int i = 0;i<n;i++)
  {
    int min = INF,u=-1;
    for(int j = 0;j<n;j++)
    {
      if(vis[j] == false && d[j] < min)
      {
        min = d[j];
        u = j;
      }
    }
    if(u == -1)
      return;
    vis[u] = true;
    for(int v = 0;v<n;v++)
    {
      if(vis[v] == false && G[u][v] != INF)
      {
        if(d[u] + G[u][v] < d[v])
        {
          d[v] = d[u] + G[u][v];
          num[v] = num[u];
          pre[v] = u;
          w[v] = w[u] + weight[v];
          pt[v] = pt[u] + 1;
        }
        else if(d[u] + G[u][v] == d[v])
        {
          num[v] = num[v] + num[u];
          if(w[u] + weight[v] > w[v])
          {
            pre[v] = u;
            w[v] = w[u] + weight[v];
            pt[v] = pt[u] + 1;
          }
          else if(w[u] + weight[v] == w[v])
          {
            double vAvg = 1.0 * w[v] / pt[v];
            double uAvg = 1.0 * (w[u] + weight[v]) / (pt[u] + 1);
            if(uAvg > vAvg)
            {
              pre[v] = u;
              pt[v] = pt[u] + 1;
            }
          }
        }
      }
    }
  }
}

void printPath(int v)
{
  if(v == strToInt[fcity])
  {
    cout<<intToStr[v];
    return;
  }
  printPath(pre[v]);
  cout<<"->"<<intToStr[v];
}

int change(string str)
{
  if(strToInt.find(str) != strToInt.end())
    return strToInt[str];
  strToInt[str] = numCity;
  intToStr[numCity] = str;
  return numCity++;
}

int main()
{
  fill(G[0],G[0]+maxn*maxn,INF);
  string str;
  int we,cost;
  string str1,str2;
  cin>>n>>k>>fcity;
  change(fcity);
  for(int i = 0;i<n-1;i++)
  {
    cin>>str>>we;
    int id = change(str);
    weight[id] = we;
  }
  for(int i = 0;i<k;i++)
  {
    cin>>str1>>str2>>cost;
    int id1 = change(str1);
    int id2 = change(str2);
    G[id1][id2] = G[id2][id1] = cost;
  }
  Dijkstra(strToInt[fcity]);
  int fin_id = strToInt["ROM"];
  printf("%d %d %d %d\n",num[fin_id],d[fin_id],w[fin_id],w[fin_id]/pt[fin_id]);
  printPath(strToInt["ROM"]);
  return 0;
}