#include <cstdio>
#include <queue>
#include <algorithm>
using namespace std;

const int maxn = 40;

struct node
{
	int data;
	node *lchild;
	node *rchild;
};

int post[maxn],in[maxn],n;

queue<node *> q;

node * create(int postL,int postR,int inL,int inR)
{
	if(postL > postR) //后序长度大于等于0时，要给叶子节点赋值NULL
		return NULL;
	node * root = (node *)malloc(sizeof(node));
	root->data = post[postR];
	int k;
	for(k=inL;k<=inR;k++)
	{
		if(in[k] == post[postR])
			break;
	}
	int numLeft = k - inL;
	root->lchild = create(postL,postL + numLeft - 1,inL,k-1);
	root->rchild = create(postL + numLeft,postR - 1,k+1,inR);
	return root;
}

int num = 0;
void BFS(node *root)
{
	q.push(root);
	while(q.size())
	{
		node * n = q.front();
		num++;
		q.pop();
		if(num == 1)
			printf("%d",n->data);
		else
			printf(" %d",n->data);
		if(n->lchild != NULL)
			q.push(n->lchild);
		if(n->rchild != NULL)
			q.push(n->rchild);
	}
}

int main()
{
	scanf("%d",&n);
	for(int i = 0 ;i<n;i++)
	{
		scanf("%d",&post[i]);
	}
	for(int i = 0 ;i<n;i++)
	{
		scanf("%d",&in[i]);
	}
	node * root = create(0,n-1,0,n-1);
	BFS(root);
	return 0;
}