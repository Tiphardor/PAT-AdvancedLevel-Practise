#include <stdio.h>
#include <stdlib.h>
#include <vector>
using namespace std;

struct node
{
	int data;
	node *lchild;
	node *rchild;
};

void insert(node * &root,int data)
{
	if(root == NULL)
	{
		root = (node *)malloc(sizeof(node));
		root->data = data;
		root->lchild = root->rchild = NULL;
		return;
	}
	if(data < root->data)
		return insert(root->lchild,data);
	else
		return insert(root->rchild,data);
}

void preOrder(node *root,vector<int> &vi)
{
	if(root == NULL)
		return;
	vi.push_back(root->data);
	preOrder(root->lchild,vi);
	preOrder(root->rchild,vi);
}

void preOrderMirror(node *root,vector<int> &vi)
{
	if(root == NULL)
		return;
	vi.push_back(root->data);
	preOrderMirror(root->rchild,vi);
	preOrderMirror(root->lchild,vi);
}

void postOrder(node *root,vector<int> &vi)
{
	if(root == NULL)
		return;
	postOrder(root->lchild,vi);
	postOrder(root->rchild,vi);
	vi.push_back(root->data);
}

void postOrderMirror(node *root,vector<int> &vi)
{
	if(root == NULL)
		return;
	postOrderMirror(root->rchild,vi);
	postOrderMirror(root->lchild,vi);
	vi.push_back(root->data);
}

vector<int> origin,pre,preM,post,postM;

int main()
{
	node *root = NULL;
	int n,i,data;
	scanf("%d",&n);
	for(i=0;i<n;i++)
	{
		scanf("%d",&data);
		origin.push_back(data);
		insert(root,data);
	}
	preOrder(root,pre);
	preOrderMirror(root,preM);
	postOrder(root,post);
	postOrderMirror(root,postM);
	if(origin == pre)
	{
		printf("YES\n");
		for(int i=0;i<post.size();i++)
			if(i != post.size()-1)
				printf("%d ",post[i]);
			else
				printf("%d",post[i]);
	}
	else if(origin == preM)
	{
		printf("YES\n");
		for(int i=0;i<postM.size();i++)
			if(i != postM.size()-1)
				printf("%d ",postM[i]);
			else
				printf("%d",postM[i]);
	}
	else
		printf("NO");
	return 0;
}