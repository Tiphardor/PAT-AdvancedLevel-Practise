#include <cstdio>
#include <vector>
#include <algorithm>

using namespace std;

const int MAXN = 510;
const int INF = 1000000000;

int n,m,st,ed,G[MAXN][MAXN],cost[MAXN][MAXN];
int d[MAXN],c[MAXN];
bool vis[MAXN] = {false};
vector<int> pre[MAXN];

void Dijkstra(int s)
{
	fill(d,d + MAXN,INF);
	fill(c,c + MAXN,INF);
	for(int i=0;i<n;i++)
	{
		pre[i].push_back(i);
	}
	d[s] = 0;
	c[s] = 0;
	for(int i=0;i<n;i++)
	{
		int u = -1,MIN = INF;
		for(int j=0;j<n;j++)
		{
			if(vis[j] == false && d[j] < MIN)
			{
				u = j;
				MIN = d[j];
			}
		}
		if(u == -1)
			return;
		vis[u] = true;
		for(int v=0;v<n;v++)
		{
			if(vis[v] == false && G[u][v] != INF)
			{
				if(d[u] + G[u][v] < d[v])
				{
					d[v] = d[u] + G[u][v];
					c[v] = c[u] + cost[u][v];
					pre[v].clear();
					pre[v].push_back(u);
				}
				else if(d[u] + G[u][v] == d[v])
				{
					if(c[u] + cost[u][v] < c[v])
					{
						c[v] = c[u] + cost[u][v];
						pre[v].clear();
						pre[v].push_back(u);
					}
				}
			}
		}
	}
}

void DFS(int ed,int st)
{
	if(ed == st)
	{
		printf("%d ",st);
		return;
	}
	DFS(pre[ed][0],st);
	printf("%d ",ed);
}


int main()
{
	scanf("%d%d%d%d",&n,&m,&st,&ed);
	int u,v;
	fill(G[0],G[0] + MAXN * MAXN,INF);
	for(int i=0;i<m;i++)
	{
		scanf("%d%d",&u,&v);
		scanf("%d%d",&G[u][v],&cost[u][v]);
		G[v][u] = G[u][v];
		cost[v][u] = cost[u][v];
	}
	Dijkstra(st);
	DFS(ed,st);
	printf("%d %d",d[ed],c[ed]);
	return 0;
}